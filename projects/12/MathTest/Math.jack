// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
  static Array twoToTheIth;

    /** Initializes the library. */
    function void init() {
      var int i, p;
      let i = 0;
      let p = 1;
      let twoToTheIth = Array.new(16);
      while (i < 16) {
        let twoToTheIth[i] = p;
        let p = p+p;
        let i = i+1;
      }
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x > 0) { return x; }
      else { return -x; }
    }
    
    /** Checks whether the ith bit of n equals 1. */
    function boolean bit(int n, int i) {
      return twoToTheIth[i] & n > 0;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int sum, shiftedX, j, absX, absY;

      let absX = Math.abs(x);
      let absY = Math.abs(y);
      let shiftedX = absX;
      while (j < 16) {
        if (Math.bit(absY, j)) {
          let sum = sum + shiftedX;
        }

        let shiftedX = shiftedX + shiftedX;
        let j = j + 1;
      }

      if ((x < 0 & y > 0) | (x > 0 & y < 0)) {
        let sum = -sum;
      }
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int q, absX, absY;

      let absX = Math.abs(x);
      let absY = Math.abs(y);

      if (absY > absX) {
        return 0;
      }

      let q = Math.divide(absX, 2 * absY);
      if ((absX - (2 * q * absY)) < absY) {
        if ((x < 0 & y > 0) | (x > 0 & y < 0)) {
          let q = -q;
        }
        return 2 * q;
      } else {
        if ((x < 0 & y > 0) | (x > 0 & y < 0)) {
          let q = -q;
        }
        return (2 * q) + 1;
      }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, j, q, qsq;
      let j = 7;
      while (j > -1) {
        let q = y + twoToTheIth[j];
        let qsq = q * q;
        if ((qsq > 0) & ((qsq < x) | (qsq = x))) {
          let y = q;
        }
        let j = j - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) { return a; }
      else { return b; }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) { return a; }
      else { return b; }
    }
}
