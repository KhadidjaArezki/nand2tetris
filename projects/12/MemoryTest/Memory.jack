// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048; // heapBase
        let freeList = heap;
        let freeList[0] = 14334; // size
        let freeList[1] = null; // next
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var Array block, prevBlock, nextBlock;
      let block = freeList;
      let prevBlock = 0;
      while (block[0] < size) {
        let prevBlock = block;
        let block = block[1];
        if (block = null) {
          return -1;
        }
      }

      let nextBlock = block + 2 + size;
      let nextBlock[0] = block[0] - size - 2; // Substract the block size
      let nextBlock[1] = block[1];
      let block[0] = size;
      let block[1] = null;

      // remove block from freeList
      if (prevBlock = 0) { 
        let freeList = nextBlock;
      } else {
        let prevBlock[1] = nextBlock; 
      }

      return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var Array block;
      let block = o - 2;
      let block[1] = freeList; // append block to head of freeList
      let freeList = block;
      return;
    }    
}
