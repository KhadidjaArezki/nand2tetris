// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load ,sel=address[11..13] ,a=dmuxOut0 ,b=dmuxOut1 ,c=dmuxOut2 ,d=dmuxOut3 ,e=dmuxOut4 ,f=dmuxOut5 ,g=dmuxOut6 ,h=dmuxOut7);
    RAM4K(in=in ,load=dmuxOut0, address[0]=false, address[1..11]=address[0..10], out=ramout0 );
    RAM4K(in=in ,load=dmuxOut1, address[0]=false, address[1..11]=address[0..10], out=ramout1);
    RAM4K(in=in ,load=dmuxOut2, address[0]=false, address[1..11]=address[0..10], out=ramout2);
    RAM4K(in=in ,load=dmuxOut3, address[0]=false, address[1..11]=address[0..10], out=ramout3);
    RAM4K(in=in ,load=dmuxOut4, address[0]=false, address[1..11]=address[0..10], out=ramout4);
    RAM4K(in=in ,load=dmuxOut5, address[0]=false, address[1..11]=address[0..10], out=ramout5);
    RAM4K(in=in ,load=dmuxOut6, address[0]=false, address[1..11]=address[0..10], out=ramout6);
    RAM4K(in=in ,load=dmuxOut7, address[0]=false, address[1..11]=address[0..10], out=ramout7);
    Mux8Way16(a=ramout0 ,b=ramout1 ,c=ramout2 ,d=ramout3 ,e=ramout4 ,f=ramout5 ,g=ramout6 ,h=ramout7 ,sel=address[11..13] ,out=out);
}
